import logging

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from .config import BOT_TOKEN, POLL_MINUTES
from . import sheets
from .texts import HELP
from .statuses import STATUSES

logging.basicConfig(level=logging.INFO)

MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton("–ú–æ–∏ –∞–¥—Ä–µ—Å–∞"), KeyboardButton("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")],
        [KeyboardButton("–û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True,
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç SEABLUU –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏ –∞–¥—Ä–µ—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        reply_markup=MAIN_KB,
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = (update.message.text or "").strip()
    text = raw.lower()

    # --- –ö–û–ú–ê–ù–î–´ –í–°–ï–ì–î–ê –í –ü–†–ò–û–†–ò–¢–ï–¢–ï ---
    if text in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
        context.user_data["mode"] = None
        await update.message.reply_text("–û–∫, –æ—Ç–º–µ–Ω–∏–ª. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=MAIN_KB)
        return

    if text == "–æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        context.user_data["mode"] = "track"
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: KR-12345):")
        return

    if text == "–º–æ–∏ –∞–¥—Ä–µ—Å–∞":
        context.user_data["mode"] = None   # <‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        await show_addresses(update, context)
        return

    if text == "–º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
        context.user_data["mode"] = None   # <‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        await show_subscriptions(update, context)
        return

    # --- –†–ï–ñ–ò–ú–´ –í–í–û–î–ê (–µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞—Ç—ã –∫–æ–º–∞–Ω–¥—ã) ---
    mode = context.user_data.get("mode")

    if mode == "track":
        # –ª–µ–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Ä–∞–∑—Ä–µ—à–∏–º –∏ ¬´SB-12345¬ª, –∏ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã, –∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∫–æ–¥
        order_id = raw
        # –µ—Å–ª–∏ —è–≤–Ω–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –Ω–æ–º–µ—Ä–æ–º
        if text in {"–º–æ–∏ –∞–¥—Ä–µ—Å–∞", "–º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "–æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑"}:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.", reply_markup=MAIN_KB)
            return
        await query_status(update, context, order_id)
        return

    if mode == "add_address_fullname":
        context.user_data["full_name"] = raw
        await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: 87001234567):")
        context.user_data["mode"] = "add_address_phone"
        return

    if mode == "add_address_phone":
        normalized = raw.strip().replace(" ", "").replace("-", "")
        if normalized.startswith("+7"):
            normalized = "8" + normalized[2:]
        elif normalized.startswith("7"):
            normalized = "8" + normalized[1:]
        if not (normalized.isdigit() and len(normalized) == 11 and normalized.startswith("8")):
            await update.message.reply_text(
                "–ü–æ—Ö–æ–∂–µ –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ù—É–∂–Ω–æ 11 —Ü–∏—Ñ—Ä –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å 8.\n"
                "–ü—Ä–∏–º–µ—Ä: 87001234567\n"
                "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª:"
            )
            return
        context.user_data["phone"] = normalized
        await update.message.reply_text("–ì–æ—Ä–æ–¥ (–ø—Ä–∏–º–µ—Ä: –ê—Å—Ç–∞–Ω–∞):")
        context.user_data["mode"] = "add_address_city"
        return

    if mode == "add_address_city":
        context.user_data["city"] = raw
        await update.message.reply_text(
            "–ê–¥—Ä–µ—Å (–º–æ–∂–Ω–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ):\n–ü—Ä–∏–º–µ—Ä: –¢—É—Ä–∞–Ω 34–ê, 6 –ø–æ–¥—ä–µ–∑–¥, 8 —ç—Ç–∞–∂, –∫–≤. 12"
        )
        context.user_data["mode"] = "add_address_address"
        return

    if mode == "add_address_address":
        context.user_data["address"] = raw
        await update.message.reply_text("–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (–ø—Ä–∏–º–µ—Ä: 010000):")
        context.user_data["mode"] = "add_address_postcode"
        return

    if mode == "add_address_postcode":
        if not (raw.isdigit() and 5 <= len(raw) <= 6):
            await update.message.reply_text("–ò–Ω–¥–µ–∫—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ. –ü—Ä–∏–º–µ—Ä: 010000\n–í–≤–µ–¥–∏ –∏–Ω–¥–µ–∫—Å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
            return
        context.user_data["postcode"] = raw
        await save_address(update, context)
        return

    # –µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ —Ä–µ–∂–∏–º ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await update.message.reply_text(
        "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî ¬´–û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=MAIN_KB,
    )



async def query_status(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str):
    order = sheets.get_order(order_id)
    if not order:
        await update.message.reply_text("–¢–∞–∫–æ–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    status = order.get("status") or "—Å—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
    origin = order.get("origin") or ""

    text = (f"–ó–∞–∫–∞–∑ *{order_id}*\n"
            f"–°—Ç–∞—Ç—É—Å: *{status}*")
    if origin:
        text += f"\n–°—Ç—Ä–∞–Ω–∞/–∏—Å—Ç–æ—á–Ω–∏–∫: {origin}"

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data=f"sub:{order_id}")
    ]])
    await update.message.reply_markdown(text, reply_markup=kb)
    context.user_data["mode"] = None

async def show_addresses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    addrs = sheets.list_addresses(update.effective_user.id)
    if not addrs:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="addr:add")]
            ]),
        )
        return

    lines = []
    for a in addrs:
        lines.append(f"‚Ä¢ {a['full_name']}, {a['phone']}, {a['city']}, {a['address']}, {a['postcode']}")
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="addr:add")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="addr:del")],
    ])
    await update.message.reply_text("–í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n" + "\n".join(lines), reply_markup=kb)

async def save_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    sheets.upsert_address(
        user_id=u.id,
        full_name=context.user_data.get("full_name", ""),
        phone=context.user_data.get("phone", ""),
        city=context.user_data.get("city", ""),
        address=context.user_data.get("address", ""),
        postcode=context.user_data.get("postcode", ""),
    )
    context.user_data["mode"] = None
    msg = (
        "–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n\n"
        f"–§–ò–û: {context.user_data.get('full_name','')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone','')}\n"
        f"–ì–æ—Ä–æ–¥: {context.user_data.get('city','')}\n"
        f"–ê–¥—Ä–µ—Å: {context.user_data.get('address','')}\n"
        f"–ò–Ω–¥–µ–∫—Å: {context.user_data.get('postcode','')}"
    )
    await update.message.reply_text(msg, reply_markup=MAIN_KB)

    context.user_data["mode"] = None
    await update.message.reply_text("–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ", reply_markup=MAIN_KB)

async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subs = sheets.list_subscriptions(update.effective_user.id)
    if not subs:
        await update.message.reply_text("–ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –û—Ç—Å–ª–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª.")
        return
    txt = "\n".join([f"‚Ä¢ {s['order_id']} (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {s.get('last_sent_status','‚Äî')})" for s in subs])
    await update.message.reply_text("–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + txt)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("sub:"):
        order_id = data.split(":", 1)[1]
        sheets.subscribe(update.effective_user.id, order_id)
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É üîî")
    elif data == "addr:add":
        await query.message.reply_text("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º/–æ–±–Ω–æ–≤–∏–º –∞–¥—Ä–µ—Å.\n–§–ò–û:")
        context.user_data["mode"] = "add_address_fullname"
    elif data == "addr:del":
        ok = sheets.delete_address(update.effective_user.id)
        await query.message.reply_text("–ê–¥—Ä–µ—Å —É–¥–∞–ª—ë–Ω." if ok else "–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî –∞–¥—Ä–µ—Å–∞ –Ω–µ—Ç.")
    else:
        await query.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

async def poll_job(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ JobQueue."""
    try:
        events = sheets.scan_updates()
        for e in events:
            try:
                await context.bot.send_message(
                    chat_id=e["user_id"],
                    text=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É {e['order_id']}: {e['new_status']}",
                )
            except Exception:
                pass
    except Exception as ex:
        logging.exception("–û—à–∏–±–∫–∞ –≤ poll_job: %s", ex)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.exception("Unhandled error", exc_info=context.error)

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CallbackQueryHandler(on_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ JobQueue (—á–µ—Ä–µ–∑ 10 —Å–µ–∫, –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ POLL_MINUTES –º–∏–Ω—É—Ç)
    application.job_queue.run_repeating(poll_job, interval=60 * POLL_MINUTES, first=10)

    # –õ–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ
    application.add_error_handler(error_handler)

    logging.info("Bot started. Waiting for messages...")
    application.run_polling()

if __name__ == "__main__":
    main()
