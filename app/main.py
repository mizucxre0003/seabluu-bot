import logging
import re
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from . import sheets
from .config import ADMIN_IDS

logging.basicConfig(level=logging.INFO)

# ---------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã ----------------------

STATUSES = [
    "–≤—ã–∫—É–ø–ª–µ–Ω",
    "–µ–¥–µ—Ç –Ω–∞ –∞–¥—Ä–µ—Å",
    "–ø—Ä–∏–µ—Ö–∞–ª –Ω–∞ –∞–¥—Ä–µ—Å (–ö–∏—Ç–∞–π)",
    "–ø—Ä–∏–µ—Ö–∞–ª –Ω–∞ –∞–¥—Ä–µ—Å (–ö–æ—Ä–µ—è)",
    "—Å–±–æ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
    "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (–∏–∑ –ö–∏—Ç–∞—è)",
    "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (–∏–∑ –ö–æ—Ä–µ–∏)",
    "–ø—Ä–∏–µ—Ö–∞–ª –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É —à–æ–ø–∞ –≤ –ê—Å—Ç–∞–Ω–µ",
    "—Å–±–æ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É",
    "—Å–æ–±—Ä–∞–Ω –∏ –≥–æ—Ç–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É",
    "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É",
    "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
    "–ø–æ–ª—É—á–µ–Ω",
    "–¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞",   # <--- –ù–û–í–´–ô –°–¢–ê–¢–£–°
]

UNPAID_STATUS = "–¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞"

MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton("–ú–æ–∏ –∞–¥—Ä–µ—Å–∞"), KeyboardButton("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")],
        [KeyboardButton("–û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True,
)

# –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —Ç–∏–ø–∞ KR-12345 / CN12345
ORDER_ID_RE = re.compile(r"([A-Z–ê-–Ø]{1,3})[ \-‚Äì‚Äî]?\s?(\d{3,})", re.IGNORECASE)
# username —Å—Ç—Ä–æ–≥–æ —Å —Å–∏–º–≤–æ–ª–æ–º @
USERNAME_RE = re.compile(r"@([A-Za-z0-9_]{5,})")


def extract_order_id(s: str) -> str | None:
    if not s:
        return None
    m = ORDER_ID_RE.search(s.strip())
    if not m:
        return None
    prefix = m.group(1).upper()
    num = m.group(2)
    return f"{prefix}-{num}"


def is_valid_status(s: str, statuses: list[str]) -> bool:
    return bool(s) and s.strip().lower() in {x.lower() for x in statuses}


def status_keyboard(cols: int = 2) -> InlineKeyboardMarkup:
    rows, row = [], []
    for i, s in enumerate(STATUSES):
        row.append(InlineKeyboardButton(s, callback_data=f"adm:pick_status_id:{i}"))
        if len(row) == cols:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(rows)


def admin_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="adm:add")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="adm:update")],
            [InlineKeyboardButton("üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="adm:list")],
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑", callback_data="adm:find")],
            [InlineKeyboardButton("üîé –ê–¥—Ä–µ—Å –ø–æ username", callback_data="adm:addrbyuser")],
            [InlineKeyboardButton("üì£ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ", callback_data="adm:remind_unpaid")],  # –ù–û–í–û–ï
            [InlineKeyboardButton("‚Ü©Ô∏è –í—ã–π—Ç–∏", callback_data="adm:back")],
        ]
    )

# ---------------------- –ö–æ–º–∞–Ω–¥—ã ----------------------


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç SEABLUU –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏ –∞–¥—Ä–µ—Å–æ–≤.",
        reply_markup=MAIN_KB,
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ –Ω–æ–º–µ—Ä—É\n"
        "‚Ä¢ –ú–æ–∏ –∞–¥—Ä–µ—Å–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å\n"
        "‚Ä¢ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "‚Ä¢ /admin ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "‚Ä¢ /adminoff ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞\n"
        "‚Ä¢ –í –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å @username –∏–ª–∏ —Å–ø–∏—Å–æ–∫ @username ‚Äî –ø—Ä–∏—à–ª—é –∞–¥—Ä–µ—Å(–∞)."
    )


async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    await (update.message or update.callback_query.message).reply_text(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å SEABLUU:", reply_markup=admin_kb()
    )
    context.user_data.pop("adm_mode", None)
    context.user_data.pop("adm_buf", None)


async def admin_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("adm_mode", None)
    context.user_data.pop("adm_buf", None)
    await update.message.reply_text("–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=MAIN_KB)


# ---------------------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ----------------------


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = (update.message.text or "").strip()
    text = raw.lower()

    # ===== ADMIN FLOW =====
    if update.effective_user.id in ADMIN_IDS:
        # –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥
        if text in {"–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel", "/adminoff"}:
            context.user_data.pop("adm_mode", None)
            context.user_data.pop("adm_buf", None)
            await update.message.reply_text("–û–∫, –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞.", reply_markup=MAIN_KB)
            return

        a_mode = context.user_data.get("adm_mode")

        # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–º–∞—Å—Ç–µ—Ä) ---
        if a_mode == "add_order_id":
            context.user_data["adm_buf"] = {"order_id": raw}
            context.user_data["adm_mode"] = "add_order_client"
            await update.message.reply_text("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
            return

        if a_mode == "add_order_client":
            context.user_data["adm_buf"]["client_name"] = raw
            context.user_data["adm_mode"] = "add_order_country"
            await update.message.reply_text("–°—Ç—Ä–∞–Ω–∞/—Å–∫–ª–∞–¥ (CN –∏–ª–∏ KR):")
            return

        if a_mode == "add_order_country":
            country = raw.upper()
            if country not in ("CN", "KR"):
                await update.message.reply_text("–í–≤–µ–¥–∏ 'CN' (–ö–∏—Ç–∞–π) –∏–ª–∏ 'KR' (–ö–æ—Ä–µ—è):")
                return
            context.user_data["adm_buf"]["country"] = country
            context.user_data["adm_mode"] = "add_order_status"
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–æ—á–Ω—ã–π:",
                reply_markup=status_keyboard(2),
            )
            return

        if a_mode == "add_order_status":
            if not is_valid_status(raw, STATUSES):
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–æ—á–Ω—ã–π:",
                    reply_markup=status_keyboard(2),
                )
                return
            context.user_data["adm_buf"]["status"] = raw.strip()
            context.user_data["adm_mode"] = "add_order_note"
            await update.message.reply_text("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")
            return

        if a_mode == "add_order_note":
            buf = context.user_data.get("adm_buf", {})
            buf["note"] = raw if raw != "-" else ""
            try:
                sheets.add_order(
                    {
                        "order_id": buf["order_id"],
                        "client_name": buf.get("client_name", ""),
                        "country": buf.get("country", ""),
                        "status": buf.get("status", "–≤—ã–∫—É–ø–ª–µ–Ω"),
                        "note": buf.get("note", ""),
                    }
                )
                await update.message.reply_text(
                    f"–ó–∞–∫–∞–∑ *{buf['order_id']}* –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", parse_mode="Markdown"
                )
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
            finally:
                context.user_data.pop("adm_mode", None)
                context.user_data.pop("adm_buf", None)
            return

        # --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–≤–≤–æ–¥ order_id) ---
        if a_mode == "upd_order_id":
            parsed_id = extract_order_id(raw)
            if not parsed_id:
                await update.message.reply_text("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä: KR-12345")
                return
            if not sheets.get_order(parsed_id):
                await update.message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                context.user_data.pop("adm_mode", None)
                context.user_data.pop("adm_buf", None)
                return
            context.user_data.setdefault("adm_buf", {})["order_id"] = parsed_id
            context.user_data["adm_mode"] = "upd_pick_status"
            rows = [
                [InlineKeyboardButton(s, callback_data=f"adm:set_status_id:{i}")]
                for i, s in enumerate(STATUSES)
            ]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", reply_markup=InlineKeyboardMarkup(rows))
            return

        # --- –ü–æ–∏—Å–∫ –∏ –≤—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ ---
        if a_mode == "find_order":
            parsed_id = extract_order_id(raw) or raw
            order = sheets.get_order(parsed_id)
            if not order:
                await update.message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                context.user_data.pop("adm_mode", None)
                return

            order_id = order.get("order_id", parsed_id)
            client_name = order.get("client_name", "‚Äî")
            status = order.get("status", "‚Äî")
            note = order.get("note", "‚Äî")
            country = order.get("country", order.get("origin", "‚Äî"))
            origin = order.get("origin")
            updated_at = order.get("updated_at")

            lines = [
                f"*order_id:* `{order_id}`",
                f"*client_name:* {client_name}",
                f"*status:* {status}",
                f"*note:* {note}",
                f"*country:* {country}",
            ]
            if origin and origin != country:
                lines.append(f"*origin:* {origin}")
            if updated_at:
                lines.append(f"*updated_at:* {updated_at}")

            await update.message.reply_markdown("\n".join(lines))
            context.user_data.pop("adm_mode", None)
            return

        # --- –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ username (–≤–≤–æ–¥ —Å–ø–∏—Å–∫–∞) ---
        if a_mode == "adm_addr_usernames":
            usernames = [m.group(1) for m in USERNAME_RE.finditer(raw)]
            if not usernames:
                await update.message.reply_text(
                    "–ü—Ä–∏—à–ª–∏ @username –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–∑–∞–ø—è—Ç—É—é/–Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É."
                )
                return
            rows = sheets.get_addresses_by_usernames(usernames)
            by_user = {str(r.get("username", "")).lower(): r for r in rows}
            reply = []
            for u in usernames:
                rec = by_user.get(u.lower())
                if not rec:
                    reply.append(f"@{u}: –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    reply.append(
                        f"@{u}\n"
                        f"–§–ò–û: {rec.get('full_name','')}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {rec.get('phone','')}\n"
                        f"–ì–æ—Ä–æ–¥: {rec.get('city','')}\n"
                        f"–ê–¥—Ä–µ—Å: {rec.get('address','')}\n"
                        f"–ò–Ω–¥–µ–∫—Å: {rec.get('postcode','')}"
                    )
            await update.message.reply_text("\n\n".join(reply))
            context.user_data.pop("adm_mode", None)
            return

        # --- –†—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ¬´–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ¬ª (–≤–≤–æ–¥ order_id) ---
        if a_mode == "adm_remind_unpaid_order":
            parsed_id = extract_order_id(raw) or raw
            ok = await remind_unpaid_for_order(context.application, parsed_id)
            if ok:
                await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É *{parsed_id}* –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ", parse_mode="Markdown")
            else:
                await update.message.reply_text("–õ–∏–±–æ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–∏–±–æ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")
            context.user_data.pop("adm_mode", None)
            return

        # --- –ë—ã—Å—Ç—Ä—ã–π –∞–¥—Ä–µ—Å –ø–æ @username (–≤–Ω–µ –º–∞—Å—Ç–µ—Ä–æ–≤) ---
        if "@" in raw and USERNAME_RE.search(raw) and not a_mode and not context.user_data.get("mode"):
            usernames = [m.group(1) for m in USERNAME_RE.finditer(raw)]
            rows = sheets.get_addresses_by_usernames(usernames)
            by_user = {str(r.get("username", "")).lower(): r for r in rows}
            reply = []
            for u in usernames:
                rec = by_user.get(u.lower())
                if not rec:
                    reply.append(f"@{u}: –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    reply.append(
                        f"@{u}\n"
                        f"–§–ò–û: {rec.get('full_name','')}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {rec.get('phone','')}\n"
                        f"–ì–æ—Ä–æ–¥: {rec.get('city','')}\n"
                        f"–ê–¥—Ä–µ—Å: {rec.get('address','')}\n"
                        f"–ò–Ω–¥–µ–∫—Å: {rec.get('postcode','')}"
                    )
            await update.message.reply_text("\n\n".join(reply))
            return

        if a_mode:
            await update.message.reply_text("–ñ–¥—É –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ.", reply_markup=admin_kb())
            return

    # ===== USER FLOW =====
    if text in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
        context.user_data["mode"] = None
        await update.message.reply_text("–û–∫, –æ—Ç–º–µ–Ω–∏–ª. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=MAIN_KB)
        return

    if text == "–æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        context.user_data["mode"] = "track"
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: CN-12345):")
        return

    if text == "–º–æ–∏ –∞–¥—Ä–µ—Å–∞":
        context.user_data["mode"] = None
        await show_addresses(update, context)
        return

    if text == "–º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
        context.user_data["mode"] = None
        await show_subscriptions(update, context)
        return

    mode = context.user_data.get("mode")
    if mode == "track":
        await query_status(update, context, raw)
        return

    # --- –ú–∞—Å—Ç–µ—Ä –∞–¥—Ä–µ—Å–∞ ---
    if mode == "add_address_fullname":
        context.user_data["full_name"] = raw
        await update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: 87001234567):")
        context.user_data["mode"] = "add_address_phone"
        return

    if mode == "add_address_phone":
        normalized = raw.strip().replace(" ", "").replace("-", "")
        if normalized.startswith("+7"):
            normalized = "8" + normalized[2:]
        elif normalized.startswith("7"):
            normalized = "8" + normalized[1:]
        if not (normalized.isdigit() and len(normalized) == 11 and normalized.startswith("8")):
            await update.message.reply_text(
                "–ù—É–∂–Ω–æ 11 —Ü–∏—Ñ—Ä –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å 8. –ü—Ä–∏–º–µ—Ä: 87001234567\n"
                "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª:"
            )
            return
        context.user_data["phone"] = normalized
        await update.message.reply_text("–ì–æ—Ä–æ–¥ (–ø—Ä–∏–º–µ—Ä: –ê—Å—Ç–∞–Ω–∞):")
        context.user_data["mode"] = "add_address_city"
        return

    if mode == "add_address_city":
        context.user_data["city"] = raw
        await update.message.reply_text("–ê–¥—Ä–µ—Å (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç):")
        context.user_data["mode"] = "add_address_address"
        return

    if mode == "add_address_address":
        context.user_data["address"] = raw
        await update.message.reply_text("–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (–ø—Ä–∏–º–µ—Ä: 010000):")
        context.user_data["mode"] = "add_address_postcode"
        return

    if mode == "add_address_postcode":
        if not (raw.isdigit() and 5 <= len(raw) <= 6):
            await update.message.reply_text("–ò–Ω–¥–µ–∫—Å –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ. –ü—Ä–∏–º–µ—Ä: 010000\n–í–≤–µ–¥–∏ –∏–Ω–¥–µ–∫—Å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
            return
        context.user_data["postcode"] = raw
        await save_address(update, context)
        return

    # –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    await update.message.reply_text(
        "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî ¬´–û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=MAIN_KB,
    )


# ---------------------- –ö–∞—Ä—Ç–æ—á–∫–∏ / –ø–æ–¥–ø–∏—Å–∫–∏ / –∞–¥—Ä–µ—Å–∞ ----------------------


async def query_status(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str):
    order_id = extract_order_id(order_id) or order_id
    order = sheets.get_order(order_id)
    if not order:
        await update.message.reply_text("–¢–∞–∫–æ–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return
    status = order.get("status") or "—Å—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
    origin = order.get("origin") or ""
    txt = f"–ó–∞–∫–∞–∑ *{order_id}*\n–°—Ç–∞—Ç—É—Å: *{status}*"
    if origin:
        txt += f"\n–°—Ç—Ä–∞–Ω–∞/–∏—Å—Ç–æ—á–Ω–∏–∫: {origin}"

    if sheets.is_subscribed(update.effective_user.id, order_id):
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unsub:{order_id}")]]
        )
    else:
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data=f"sub:{order_id}")]]
        )
    await update.message.reply_markdown(txt, reply_markup=kb)
    context.user_data["mode"] = None


async def show_addresses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    addrs = sheets.list_addresses(update.effective_user.id)
    if not addrs:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–¥—Ä–µ—Å–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="addr:add")]]
            ),
        )
        return
    lines = []
    for a in addrs:
        lines.append(
            f"‚Ä¢ {a['full_name']}, {a['phone']}, {a['city']}, {a['address']}, {a['postcode']}"
        )
    kb = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="addr:add")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="addr:del")],
        ]
    )
    await update.message.reply_text("–í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n" + "\n".join(lines), reply_markup=kb)


async def save_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    sheets.upsert_address(
        user_id=u.id,
        username=u.username or "",
        full_name=context.user_data.get("full_name", ""),
        phone=context.user_data.get("phone", ""),
        city=context.user_data.get("city", ""),
        address=context.user_data.get("address", ""),
        postcode=context.user_data.get("postcode", ""),
    )
    # –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –≤ note –∫–∞–∫–∏—Ö-—Ç–æ –∑–∞–∫–∞–∑–æ–≤
    try:
        username = (u.username or "").strip()
        if username:
            rel_orders = sheets.find_orders_for_username(username)
            for oid in rel_orders:
                try:
                    sheets.subscribe(u.id, oid)
                except Exception:
                    pass
    except Exception as e:
        logging.warning(f"auto-subscribe on address save failed: {e}")

    context.user_data["mode"] = None
    msg = (
        "–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n\n"
        f"–§–ò–û: {context.user_data.get('full_name','')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone','')}\n"
        f"–ì–æ—Ä–æ–¥: {context.user_data.get('city','')}\n"
        f"–ê–¥—Ä–µ—Å: {context.user_data.get('address','')}\n"
        f"–ò–Ω–¥–µ–∫—Å: {context.user_data.get('postcode','')}"
    )
    await update.message.reply_text(msg, reply_markup=MAIN_KB)


async def show_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subs = sheets.list_subscriptions(update.effective_user.id)
    if not subs:
        await update.message.reply_text("–ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –û—Ç—Å–ª–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª.")
        return
    txt_lines, kb_rows = [], []
    for s in subs:
        last = s.get("last_sent_status", "‚Äî")
        order_id = s["order_id"]
        txt_lines.append(f"‚Ä¢ {order_id} (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {last})")
        kb_rows.append([InlineKeyboardButton(f"üóë –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {order_id}", callback_data=f"unsub:{order_id}")])
    await update.message.reply_text("–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(txt_lines), reply_markup=InlineKeyboardMarkup(kb_rows))


async def notify_subscribers(application, order_id: str, new_status: str):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.
    –ü–ª—é—Å, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å == '–¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞' ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º @username –∏–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è.
    """
    subs = sheets.get_all_subscriptions()
    if subs:
        targets = [s for s in subs if str(s.get("order_id")) == str(order_id)]
        for s in targets:
            uid = int(s["user_id"])
            try:
                await application.bot.send_message(
                    chat_id=uid,
                    text=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É *{order_id}*\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: *{new_status}*",
                    parse_mode="Markdown",
                )
                sheets.set_last_sent_status(uid, order_id, new_status)
            except Exception as e:
                logging.warning(f"notify_subscribers fail to {uid}: {e}")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å = "–¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞" ‚Äî –ø–∏–Ω–≥—É–µ–º –≤—Å–µ—Ö –∏–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    if (new_status or "").strip().lower() == UNPAID_STATUS:
        await remind_unpaid_for_order(application, order_id)


# ---------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ ----------

def _usernames_from_note(note: str) -> list[str]:
    return re.findall(r"@([A-Za-z0-9_]{5,})", note or "")

async def remind_unpaid_for_order(application, order_id: str) -> bool:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö @user –∏–∑ note –∑–∞–∫–∞–∑–∞, –Ω–∞—Ö–æ–¥–∏—Ç –∏—Ö user_id –ø–æ –ª–∏—Å—Ç—É addresses,
    –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ –∑–∞–∫–∞–∑ (–µ—Å–ª–∏ –Ω–∞–¥–æ) –∏ —à–ª—ë—Ç –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É¬ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±—ã–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏.
    """
    order = sheets.get_order(order_id)
    if not order:
        return False
    note = order.get("note") or ""
    usernames = _usernames_from_note(note)
    if not usernames:
        return False

    user_ids = sheets.get_user_ids_by_usernames(usernames)
    if not user_ids:
        return False

    sent = 0
    for uid in user_ids:
        try:
            sheets.subscribe(uid, order_id)
        except Exception:
            pass
        try:
            await application.bot.send_message(
                chat_id=int(uid),
                text=(
                    f"–ó–∞–∫–∞–∑ *{order_id}*\n"
                    f"–°—Ç–∞—Ç—É—Å: *–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞*\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É. "
                    f"–ï—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º."
                ),
                parse_mode="Markdown",
            )
            sent += 1
        except Exception as e:
            logging.warning(f"payment reminder fail to {uid}: {e}")
    return sent > 0

async def remind_unpaid_daily(application) -> int:
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å == '–¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞'.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    orders = sheets.list_orders_by_status(UNPAID_STATUS)
    total_orders = 0
    for o in orders:
        oid = o.get("order_id")
        if not oid:
            continue
        ok = await remind_unpaid_for_order(application, oid)
        if ok:
            total_orders += 1
    return total_orders

def register_daily_unpaid_job(application):
    """
    –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ (–Ω–∞–ø—Ä., –∏–∑ webhook.on_startup).
    –¢—Ä–µ–±—É–µ—Ç APScheduler –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö.
    """
    try:
        from apscheduler.schedulers.asyncio import AsyncIOScheduler
        scheduler = AsyncIOScheduler()
        # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏; first_run —á–µ—Ä–µ–∑ ~1 —á–∞—Å –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        scheduler.add_job(lambda: remind_unpaid_daily(application), "interval", days=1)
        scheduler.start()
        logging.info("Daily unpaid reminder job registered.")
    except Exception as e:
        logging.warning(f"Daily job not started: {e}")


# ---------------------- Callback Query ----------------------


async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    # --- –ö–Ω–æ–ø–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ ---
    if data == "addr:add":
        context.user_data["mode"] = "add_address_fullname"
        await q.message.reply_text("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º/–æ–±–Ω–æ–≤–∏–º –∞–¥—Ä–µ—Å.\n–§–ò–û:")
        return

    if data == "addr:del":
        ok = sheets.delete_address(update.effective_user.id)
        if ok:
            await q.message.reply_text("–ê–¥—Ä–µ—Å —É–¥–∞–ª—ë–Ω ‚úÖ")
        else:
            await q.message.reply_text("–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # --- –ê–¥–º–∏–Ω-–º–µ–Ω—é ---
    if data == "adm:back":
        context.user_data.pop("adm_mode", None)
        context.user_data.pop("adm_buf", None)
        await q.message.edit_text("–ì–æ—Ç–æ–≤–æ. –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    if data == "adm:add":
        if update.effective_user.id in ADMIN_IDS:
            context.user_data["adm_mode"] = "add_order_id"
            context.user_data["adm_buf"] = {}
            await q.message.reply_text("–í–≤–µ–¥–∏ *order_id* (–Ω–∞–ø—Ä–∏–º–µ—Ä: CN-12345):", parse_mode="Markdown")
        return

    if data == "adm:update":
        if update.effective_user.id in ADMIN_IDS:
            context.user_data["adm_mode"] = "upd_order_id"
            await q.message.reply_text("–í–≤–µ–¥–∏ *order_id* –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", parse_mode="Markdown")
        return

    if data == "adm:list":
        if update.effective_user.id in ADMIN_IDS:
            orders = sheets.list_recent_orders(10)
            if not orders:
                await q.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            else:
                txt = "\n".join([f"‚Ä¢ {o.get('order_id')} ‚Äî {o.get('status','')}" for o in orders])
                await q.message.reply_text(f"*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\n{txt}", parse_mode="Markdown")
        return

    if data == "adm:find":
        if update.effective_user.id in ADMIN_IDS:
            context.user_data["adm_mode"] = "find_order"
            await q.message.reply_text("–í–≤–µ–¥–∏ *order_id* –¥–ª—è –ø–æ–∏—Å–∫–∞:", parse_mode="Markdown")
        return

    if data == "adm:addrbyuser":
        if update.effective_user.id in ADMIN_IDS:
            context.user_data["adm_mode"] = "adm_addr_usernames"
            await q.message.reply_text("–ü—Ä–∏—à–ª–∏ @username –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–∑–∞–ø—è—Ç—É—é/–Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.")
        return

    # –ù–û–í–û–ï: —Ä—É—á–Ω–æ–π –ø—É—à –¥–æ–ª–∂–Ω–∏–∫–∞–º
    if data == "adm:remind_unpaid":
        if update.effective_user.id in ADMIN_IDS:
            context.user_data["adm_mode"] = "adm_remind_unpaid_order"
            await q.message.reply_text("–í–≤–µ–¥–∏ *order_id* –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞–º:", parse_mode="Markdown")
        return

    # --- –ü–æ–¥–±–æ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ---
    if data.startswith("adm:pick_status_id:"):
        if update.effective_user.id not in ADMIN_IDS:
            return
        try:
            idx = int(data.split("adm:pick_status_id:", 1)[1])
            status = STATUSES[idx]
        except Exception:
            await q.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
            return
        context.user_data.setdefault("adm_buf", {})["status"] = status
        context.user_data["adm_mode"] = "add_order_note"
        await q.message.reply_text("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")
        return

    # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ---
    if data.startswith("adm:set_status_id:"):
        if update.effective_user.id not in ADMIN_IDS:
            return
        try:
            idx = int(data.split("adm:set_status_id:", 1)[1])
            status = STATUSES[idx]
        except Exception:
            await q.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
            return
        order_id = context.user_data.get("adm_buf", {}).get("order_id")
        ok = sheets.update_order_status(order_id, status)
        if ok:
            await q.message.reply_text(
                f"–°—Ç–∞—Ç—É—Å *{order_id}* –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: _{status}_ ‚úÖ", parse_mode="Markdown"
            )
            await notify_subscribers(context.application, order_id, status)
        else:
            await q.message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        context.user_data.pop("adm_mode", None)
        context.user_data.pop("adm_buf", None)
        return

    # --- –ü–æ–¥–ø–∏—Å–∫–∞ / –æ—Ç–ø–∏—Å–∫–∞ ---
    if data.startswith("sub:"):
        order_id = data.split(":", 1)[1]
        sheets.subscribe(update.effective_user.id, order_id)
        await q.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"unsub:{order_id}")]]
            )
        )
        await q.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É üîî")
        return

    if data.startswith("unsub:"):
        order_id = data.split(":", 1)[1]
        ok = sheets.unsubscribe(update.effective_user.id, order_id)
        await q.message.reply_text("–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞." if ok else "–í—ã –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        try:
            await q.edit_message_reply_markup(
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data=f"sub:{order_id}")]]
                )
            )
        except Exception:
            pass
        return


# ---------------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ----------------------


def register_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("admin", admin_menu))
    application.add_handler(CommandHandler("adminoff", admin_off))
    application.add_handler(CallbackQueryHandler(on_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
