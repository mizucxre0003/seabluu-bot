# app/main.py
import logging
from typing import List

from telegram import (
    Update,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler, MessageHandler, CallbackQueryHandler, filters,
)

from . import sheets
from .config import ADMIN_IDS  # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ ID (int/str)

logger = logging.getLogger(__name__)

# =========================
# –ë–ê–ó–û–í–´–ï –•–≠–ù–î–õ–ï–†–´ / –ú–ï–ù–Æ
# =========================

HELP_TEXT = (
    "‚Ä¢ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑/—Ä–∞–∑–±–æ—Ä ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ –Ω–æ–º–µ—Ä—É\n"
    "‚Ä¢ –ú–æ–∏ –∞–¥—Ä–µ—Å–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å\n"
    "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞\n"
    "–î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî ¬´–û—Ç–º–µ–Ω–∞¬ª."
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    text = f"–ü—Ä–∏–≤–µ—Ç, {u.first_name or '–¥—Ä—É–≥'}!\n\n{HELP_TEXT}"
    # –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = ReplyKeyboardMarkup(
        [[KeyboardButton("–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ä–∞–∑–±–æ—Ä")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await update.message.reply_text(text, reply_markup=kb)

def _is_admin(user_id) -> bool:
    return str(user_id) in {str(x) for x in ADMIN_IDS}

# =========================
# –†–ï–ñ–ò–ú –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê
# =========================

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∞–¥–º–∏–Ω–æ–≤ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç on_admin_text —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º -10)."""
    if not update.message:
        return
    text = (update.message.text or "").strip().lower()

    # –ö–ª—é—á–µ–≤–æ–µ: —Ç–µ–ø–µ—Ä—å –ª–æ–≤–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if text in ("–æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", "–æ—Ç—Å–ª–µ–¥–∏—Ç—å —Ä–∞–∑–±–æ—Ä"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä CN-00000). –î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        context.user_data["awaiting_order_id"] = True
        return

    if context.user_data.get("awaiting_order_id"):
        order_id = (update.message.text or "").strip()
        context.user_data.pop("awaiting_order_id", None)
        # TODO: –∑–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã orders
        await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –ø–æ {order_id}: (–∑–¥–µ—Å—å –≤–∞—à —Å—Ç–∞—Ç—É—Å)")
        return

    if text == "–æ—Ç–º–µ–Ω–∞":
        context.user_data.clear()
        await update.message.reply_text("–û–∫, –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞.")
        return

    # –ø—Ä–æ—á–µ–µ
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî ¬´–û—Ç–º–µ–Ω–∞¬ª.")

# ============
# –ê–î–†–ï–°–ê
# ============

async def save_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π username -> lower()."""
    u = update.effective_user
    # –ü—Ä–∏–º–µ—Ä: –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤—ã —Å–æ–±–µ—Ä—ë—Ç–µ —á–µ—Ä–µ–∑ —Å–≤–æ—é —Ñ–æ—Ä–º—É
    full_name = u.full_name or ""
    phone = ""
    city = ""
    address = ""
    postcode = ""
    username = (u.username or "").strip().lower()
    logger.info("[addresses] save: user_id=%s username=%s", u.id, username)

    sheets.upsert_address(
        user_id=u.id,
        full_name=full_name,
        phone=phone,
        city=city,
        address=address,
        postcode=postcode,
        username=username,
    )

    # –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –µ—Å–ª–∏ —É –≤–∞—Å –æ–Ω–∞ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞:
    try:
        rel_orders: List[str] = sheets.find_orders_for_username(username.lower())  # noqa: your impl
        # for oid in rel_orders: sheets.subscribe(u.id, oid)  # noqa
    except Exception:
        pass

    await update.message.reply_text("–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

# ======================
# –†–ê–°–°–´–õ–ö–ê –î–û–õ–ñ–ù–ò–ö–ê–ú
# ======================

async def remind_unpaid_for_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ–ª–∂–Ω–∏–∫–∞–º –ø–æ –æ–¥–Ω–æ–º—É order_id + –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É."""
    if not _is_admin(update.effective_user.id):
        return

    await update.message.reply_text("–í–≤–µ–¥–∏ order_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞–º:")
    context.user_data["awaiting_unpaid_order_id"] = True

async def on_text_after_remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ order_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑–±–æ—Ä—É."""
    if not update.message:
        return
    if not context.user_data.get("awaiting_unpaid_order_id"):
        return
    if not _is_admin(update.effective_user.id):
        return

    order_id = (update.message.text or "").strip()
    context.user_data.pop("awaiting_unpaid_order_id", None)

    unpaid_usernames = [u.lower() for u in sheets.get_unpaid_usernames(order_id)]
    logger.info("[remind] order=%s unpaid=%s", order_id, unpaid_usernames)

    user_ids = sheets.get_user_ids_by_usernames(unpaid_usernames)
    logger.info("[remind] mapped user_ids=%s", user_ids)

    report_ok, report_fail = [], []

    # –û—Ç–ø—Ä–∞–≤–∫–∞
    for uid in user_ids:
        try:
            await context.bot.send_message(
                chat_id=uid,
                text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ: –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä {order_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ."
            )
            report_ok.append(uid)
        except Exception as e:
            logger.warning("remind failed for %s: %s", uid, e)
            report_fail.append({"user_id": uid, "reason": str(e)})

    # –ò—Ç–æ–≥ –∞–¥–º–∏–Ω—É
    ok_count = len(report_ok)
    fail_count = len(report_fail)
    lines = [
        f"üìä –û—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ (order {order_id})",
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {ok_count}",
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {fail_count}",
    ]
    if fail_count:
        details = [f"‚Ä¢ user_id={x['user_id']} ‚Äî {x['reason']}" for x in report_fail]
        lines += ["", "–ü—Ä–∏—á–∏–Ω—ã:", *details]

    await context.bot.send_message(chat_id=update.effective_chat.id, text="\n".join(lines))

# –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º —Ä–∞–∑–±–æ—Ä–∞–º
async def broadcast_all_unpaid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update.effective_user.id):
        return

    grouped = sheets.get_all_unpaid_grouped()
    total_orders = len(grouped)
    total_ok = 0
    total_fail = 0
    report_lines = []
    for order_id, users in grouped.items():
        unpaid_usernames = [u.lower() for u in users]
        user_ids = sheets.get_user_ids_by_usernames(unpaid_usernames)
        ok, fail = 0, 0
        for uid in user_ids:
            try:
                await context.bot.send_message(
                    chat_id=uid,
                    text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ: –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä {order_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ."
                )
                ok += 1
            except Exception:
                fail += 1
        total_ok += ok
        total_fail += fail
        report_lines.append(f"{order_id}: ‚úÖ {ok} ‚ùå {fail}")

    summary = "\n".join([
        "üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –¥–æ–ª–∂–Ω–∏–∫–∞–º ‚Äî –∏—Ç–æ–≥",
        f"–†–∞–∑–±–æ—Ä–æ–≤: {total_orders}",
        f"–£—Å–ø–µ—à–Ω–æ: {total_ok}",
        f"–û—à–∏–±–æ–∫: {total_fail}",
        "",
        *report_lines,
    ])
    await context.bot.send_message(chat_id=update.effective_chat.id, text=summary)

# ============================
# –ê–î–ú–ò–ù-–ö–õ–ê–í–ò–ê–¢–£–†–ê –ò –ú–ï–ù–Æ
# ============================

ADMIN_MENU_BTNS = [
    [KeyboardButton("–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ä–∞–∑–±–æ—Ä"), KeyboardButton("–ê–¥–º–∏–Ω: –†–∞—Å—Å—ã–ª–∫–∞")],
    [KeyboardButton("–ê–¥–º–∏–Ω: –ó–∞–∫–∞–∑—ã"),   KeyboardButton("–ê–¥–º–∏–Ω: –ê–¥—Ä–µ—Å–∞")],
]
ADMIN_BACK_BTN = KeyboardButton("–ù–∞–∑–∞–¥, –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
BROADCAST_MENU_BTNS = [
    [KeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –¥–æ–ª–∂–Ω–∏–∫–∞–º")],
    [KeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ ID —Ä–∞–∑–±–æ—Ä–∞")],
    [ADMIN_BACK_BTN],
]

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update.effective_user.id):
        return
    kb = ReplyKeyboardMarkup(ADMIN_MENU_BTNS, resize_keyboard=True, one_time_keyboard=False)
    await context.bot.send_message(update.effective_chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=kb)

async def show_broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update.effective_user.id):
        return
    kb = ReplyKeyboardMarkup(BROADCAST_MENU_BTNS, resize_keyboard=True, one_time_keyboard=False)
    await context.bot.send_message(update.effective_chat.id, "–†–∞–∑–¥–µ–ª ¬´–†–∞—Å—Å—ã–ª–∫–∞¬ª", reply_markup=kb)

async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_admin(update.effective_user.id):
        return
    await show_admin_menu(update, context)

async def on_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Å group=-10, –ø–æ—ç—Ç–æ–º—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–Ω—å—à–µ on_text."""
    if not update.message:
        return
    if not _is_admin(update.effective_user.id):
        return

    text = (update.message.text or "").strip().lower()

    # –ü–æ–¥–º–µ–Ω—é ¬´–†–∞—Å—Å—ã–ª–∫–∞¬ª
    if text == "–∞–¥–º–∏–Ω: —Ä–∞—Å—Å—ã–ª–∫–∞":
        return await show_broadcast_menu(update, context)

    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
    if text in ("–Ω–∞–∑–∞–¥, –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "–Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", "–Ω–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"):
        return await show_admin_menu(update, context)

    # –ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ ¬´–†–∞—Å—Å—ã–ª–∫–∞¬ª
    if text == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –¥–æ–ª–∂–Ω–∏–∫–∞–º":
        return await broadcast_all_unpaid(update, context)

    if text == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ id —Ä–∞–∑–±–æ—Ä–∞":
        return await remind_unpaid_for_order(update, context)

    # –ß—Ç–æ–±—ã –∞–¥–º–∏–Ω —Ç–æ–∂–µ –º–æ–≥ ¬´–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ä–∞–∑–±–æ—Ä¬ª –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    if text in ("–æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", "–æ—Ç—Å–ª–µ–¥–∏—Ç—å —Ä–∞–∑–±–æ—Ä"):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä CN-00000). –î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        context.user_data["awaiting_order_id"] = True
        return

# ============================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–≠–ù–î–õ–ï–†–û–í
# ============================

def register_handlers(application):
    """–í–ê–®–ò –±–∞–∑–æ–≤—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã (–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –±—ã–ª–æ —É –≤–∞—Å, –Ω–∏–∂–µ ‚Äî –ø—Ä–∏–º–µ—Ä—ã)."""
    application.add_handler(CommandHandler("start", start))
    # –æ–±—â–∏–π —Ç–µ–∫—Å—Ç (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π) ‚Äî –≤ –æ–±—ã—á–Ω–æ–π –≥—Ä—É–ø–ø–µ
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), on_text))
    # –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ order_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑–±–æ—Ä—É
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), on_text_after_remind))

def register_admin_ui(application):
    """–û—Ç–¥–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω-UI. –°—Ç–∞–≤–∏–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º group=-10, —á—Ç–æ–±—ã –æ–±–æ–≥–Ω–∞—Ç—å –æ–±—â–∏–π on_text."""
    application.add_handler(CommandHandler("admin", cmd_admin), group=-10)
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), on_admin_text), group=-10)

# ==== –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—á–∏–µ –≤–∞—à–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ/–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ====
# application.add_handler(CallbackQueryHandler(...))
# ...
